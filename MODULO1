NOTAS.-
///////////////////////////HOLA MUNDO 8.- /////////////////////

HotReload = Renderizacion Manteniendo el estado.

///////////////////////TIPOS DE DATOS 9.- ////////////////////


void main() {
  
  //NUMEROS
  int empleados = 10;
  double pi = 3.1415;
  var numero = 1.0;
  
  print('$empleados - $pi -$numero');
    
    //STRINGS
  String nombre = 'Tony';//0-3
  print(nombre);
  print(nombre[0]);
  print(nombre[nombre.length-1]);//length= 4-1=3 =tony de 0 a 3 print Y
   
}

/////////////////Booleanos y Condiciones 10.- //////////////////

void main() {
  
  bool activado = true;
  
  print(activado);
  
  if(!activado){ //activado= false
    print('El motor esta funcionando');
  }else{
    print('el motor esta apagado'); //print false case
  }
  
  
}



/////////////////Tipo de Dato Lista 11.- //////////////////



void main() {
  
  //Una estructura de datos dinámica es aquella en la que el tamaño ocupado en memoria puede modificarse durante la ejecución del programa
  
//LISTA: Coleccion de objetos que tienen algo en comun
  
  List<int> numeros = [1,2,3,4,5];
  print(numeros);
  
  numeros.add(6);
  print(numeros);
  
  // Tamaño fijo
  List masNumeros = List(10);
  print(masNumeros);
  masNumeros.add(1);// Esto no se puede hacer por eso marca Script error
  print(masNumeros);
}

/////////////////Tipo de Dato Map 12.- //////////////////


void main() {
  
  //MAPs son pares de valores el primer valor es la llave y el segundo es el valor, 
  
  String propiedad = 'soltero'; 
  
  Map<String, dynamic> persona ={
    'nombre':'Carlos',
    'edad':'32',
    'soltero': true
  };
  
  Map<int, String> personas ={
    1: 'Tony',
    2: 'Peter',
    3: 'Strange'
  };
  
  personas.addAll({4:'Banner'});
    
  print(personas);
  print(personas[2]); //imprime peter porque apunta a la llave 2
}

/////////////////Funciones en DART 13.- //////////////////
void main() {

  String mensaje = saludar2(nombre: 'Fernando', texto:'Hola, ');
  print(mensaje);
}

String saludar({String texto,String nombre}){
  //void se aplico para aclarar a dart que no regrersa nada que pueda ser almacenado en variables y controlar mejor el flujo.
  //print('Hola');
  return '$texto $nombre';
}

//misma funcion usando la funcion de flecha
String saludar2({String texto,String nombre})=>'$texto $nombre';


/////////////////Clases en DART 14.- //////////////////

void main() {

  //new es opcional para definir una nueva instancia
  //final es para decir que esa variable va a cambiar de su valor como tal
 
  /*
   //final exampple
   
 final wolverine = new Heroe();
 wolverine= new Heroe(); //esto no puede ser
 
 */
  
  //LA DIFERENCIA ENTRE EL METODO Y UNA FUNCION
  //EL METODO SE ENCUENTRA DENTRO DE UNA CLASE
  //FUNCION LA QUE SE ENCUENTRA FUERA DE UNA CLASE
  
  final wolverine = new Heroe(poder:'Regeneracion'); // se lanza al constructor, el constructor lo procesa y obtienes el objeto nombreDeclase.propiedad

  print(wolverine.poder);
   print(wolverine.nombre);
  print(wolverine);
  
  
  
}

class Heroe{
  
  String nombre;
  String poder;
  
  //el constructor tiene el mismo nombre de la clase //el sinnombre es para el default
  Heroe({String nombre='sin nombre', String poder}){ //lo que recibe el constructor
    this.nombre= nombre;
    this.poder= poder;
  }
    
   String toString(){ //asignacion tostring al metodo 
     
     return 'nombre: ${this.nombre} - poder: ${this.poder}'; //retorna variable nombre y poder
     
   }
  
}


/////////////////FORMA CORTA DE DEFINIR CLASES 15.- //////////////////
void main() {

  
  final wolverine = new Heroe(poder:'Regeneracion',nombre: 'Logan1'); // se lanza al constructor, el constructor lo procesa y obtienes el objeto nombreDeclase.propiedad
  
  print(wolverine);
  
}

class Heroe{
  
  String nombre;
  String poder;
  

  Heroe({this.nombre, this.poder});
  
   String toString()=>'nombre: $nombre - poder: $poder'; 
    
}



/////////////////Constructor Con Nombre 16.- //////////////////



import 'dart:convert';

void main() {

  
  //final wolverine = new Heroe('Logan1','regeneracion'); 
  
  final rawJson='{"nombre":"Logan","poder":"Regeneracion"}';
  Map parsedJson= json.decode(rawJson);
  
  final wolverine = new Heroe.fromJson(parsedJson);
  
  //print(parsedJson);
  
  print(wolverine.nombre);
  print(wolverine.poder);
  
  
  
  
}

class Heroe{
  
  String nombre;
  String poder;
  
  Heroe(this.nombre, this.poder);
  
  //contrudtor con nombre
  Heroe.fromJson(Map parsedJson){
    nombre = parsedJson['nombre'];
    poder = parsedJson['poder'];
  }
     
}


/////////////////getters y setters 17.- //////////////////

void main() {
  
  final cuadrado = new Cuadrado();
  cuadrado.lado = 11;
  
  
  print( cuadrado );
  print('area: ${cuadrado.area}');
  
}

class Cuadrado{
  
   //double _lado; el guion bajo hace una variable privada es decir que solo funciona dentro de esta clase
  
  double _lado;
  //double _area;
  
  set lado(double value){ //lado a su vez lleva la propiedad value de tipo double
    
    if (value<=0){
      throw('el lado no puede ser menor o igual a cero'); //arrojar error de validacion
    }
    
    _lado = value;
    
  }
  
  toString() => 'Lado: $_lado'; //
  
  double get area => _lado * _lado;
  
}



/////////////////clases abstractas 18.- //////////////////




void main(){
  
  //la clase abtracta no se puede instanciar con nee
  //Sirve para obligara a las demas clases a que implementen sus metodos
  final perro = new Perro();
  perro.emitirSonido();
  
  final gato= new Gato();
  gato.emitirSonido();
}


abstract class Animal{
  
  int patas;
  
  void emitirSonido();
}

class Perro implements Animal{
  
  int patas;
  int colas;
  
  void emitirSonido()=>print('GuauUUUUUUU!!!!!!!!');
  
}


class Gato implements Animal{
  
   int patas;
 
  
  void emitirSonido()=>print('MIauUUUUUUU!!!!!!!!');
  
}


/////////////////extends 19.- //////////////////

//implements es obligatorio y extendí opcional

void main(){
  
  final superman = new Heroe();
  superman.nombre = 'Clarck Kent';
  
  final luthor = new Villano();
  luthor.nombre= 'Lex Luthor';
    
  
}
abstract class Personaje{
  
  String nombre;
  String poder;
  
}
class Heroe extends Personaje{
  
  
  int valentia;
}

class Villano extends Personaje{
  
  
  int maldad;
}



/////////////////Mixins 20.- //////////////////


abstract class Animal{
  //abstract para que no se puedan crear clases de esta instancia
  
  /*
    Mixins are very helpful when we want to share a behavior across multiple classes that don’t share the same class hierarchy, or when it doesn’t make sense to implement such a behavior in a superclass.*/
  
}

abstract class Mamifero extends Animal{}

abstract class Ave extends Animal{}

abstract class Pez extends Animal{}


abstract class Volador {
  void volar()=>print('Estoy Volando!!!');
}

abstract class Caminante {
  void volar()=>print('Estoy Caminando!!!');
}

abstract class Nadador {
  void nadar()=>print('Estoy Nadando!!!');
}

//with Mixins
class Delfin extends Mamifero with Nadador{}

class Murcielago extends Mamifero with Caminante, Volador {}

class Gato extends Mamifero with Caminante{}

class Paloma extends Ave with Caminante, Volador{}

class Pato extends Ave with Caminante, Volador, Nadador{}

class Tiburos extends Pez with Nadador{}

class PezVolador extends Pez with Nadador, Volador{}


void main(){
  final pato = new Pato();
  pato.volar();
  
  final pezVolador = PezVolador();
  pezVolador.nadar();
}


/////////////////Futures 21.- //////////////////

void main(){
  
  //Future tarea async que se realiza a destiempo
  
  print('Estamos a punto de pedir estados');
  httpGet('https://api.nasa.com/aliens').then((data){
    print(data);
    
  });
  
  print('ultima linea');
}

Future<String> httpGet(String url){
  return Future.delayed(new Duration(seconds: 4), (){
    return 'Hola Mundo';
  });
}
